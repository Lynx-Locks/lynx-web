package models

import (
	"github.com/go-webauthn/webauthn/protocol"
	"time"
)

type SessionData struct {
	Challenge            string    `json:"challenge"`
	UserId               []byte    `gorm:"serializer:json" json:"userId"`
	AllowedCredentialIds [][]byte  `gorm:"serializer:json" json:"allowedCredentials,omitempty"`
	Expires              time.Time `json:"expires"`

	UserVerification protocol.UserVerificationRequirement `gorm:"serializer:json" json:"userVerification"`
	Extensions       protocol.AuthenticationExtensions    `gorm:"serializer:json" json:"extensions,omitempty"`
}

type Flags struct {
	UserPresent    bool `json:"userPresent"`
	UserVerified   bool `json:"userVerified"`
	BackupEligible bool `json:"backupEligible"`
	BackupState    bool `json:"backupState"`
}

type Authenticator struct {
	AAGUID       []byte `gorm:"serializer:json" json:"AAGUID"`
	SignCount    uint32 `json:"signCount"`
	CloneWarning bool   `json:"cloneWarning"`
	Attachment   string `json:"attachment"`
}

type Credential struct {
	// A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
	Id []byte `gorm:"serializer:json" json:"id"`

	// The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
	// a Relying Party at registration time (see also public key credential). The private key portion of the credential key
	// pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
	// used as the attestation key pair, see self attestation for details.
	PublicKey []byte `gorm:"serializer:json" json:"publicKey"`

	// The attestation format used (if any) by the authenticator when creating the credential.
	AttestationType string `json:"attestationType"`

	// The transport types the authenticator supports.
	Transport []string `gorm:"serializer:json" json:"transport"`

	// The commonly stored flags.
	Flags Flags `gorm:"serializer:json" json:"flags"`

	// The Authenticator information for a given certificate.
	Authenticator Authenticator `gorm:"serializer:json" json:"authenticator"`
}

type response struct {
	AttestationObject string   `json:"attestationObject"`
	ClientDataJson    string   `json:"clientDataJson"`
	Transports        []string `json:"transports"`
}

type CompleteWebauthnResponse struct {
	Id                      string   `json:"id"`
	RawId                   string   `json:"rawId"`
	AuthenticatorAttachment string   `json:"authenticatorAttachment"`
	Response                response `json:"response"`
	Type                    string   `json:"type"`
	Challenge               string   `json:"challenge"`
}
